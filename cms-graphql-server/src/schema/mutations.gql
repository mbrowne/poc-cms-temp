input EntityDefinitionInput {
    """
    NB: This can be different from the `id` argument passed to updateEntityDefinition(), in the case
    where the user changes the ID
    """
    id: ID!
    label: String
    # displayNameTemplate: String
    pluralLabel: String!
    description: String
    templateEntityDefinitionId: ID
    isAbstract: Boolean! = false
    # hasUrl: Boolean!
    #
    # If we support fieldsets in the future, then this field will probably no longer be needed.
    # `properites` is optional so that you can update just the basic attributes of an entity definition
    # without re-sending all the properties.
    properties: [PropertyDefinitionInput!]
    # fieldsets: [PropertyFieldsetInput!]
}

# input PropertyFieldsetInput {
#     title: String
#     properties: [PropertyDefinitionInput!]
#     computedProperties: [ComputedPropertyDefinitionInput!]
# }

# NOTE: literalValue and associationValue are separate fields
# because graphql does not currently support polymorphic input types (i.e. unions/interfaces)
# See https://github.com/facebook/graphql/issues/114
input PropertyDefinitionInput {
    typename: String = "LiteralPropertyDefinition"
    id: String!
    label: String!
    dataType: String!
    readOnly: Boolean!
    # editingComponent: String!
    # TODO
    # flags: [PropertyFlagInput!]

    # # Separate fields for different sub-types of Property, since graphql does not currently support
    # # polymorphic input types (i.e. unions/interfaces)
    # literalProperty: LiteralPropertyInput
    # associationProperty: AssociationDefinitionInput
    # staticAssetProperty: StaticAssetPropertyDefinitionInput
}

# input LiteralPropertyDefinitionInput {
#     defaultValue: LiteralPropertyValueScalar
# }

input PropertyStateInput {
    propertyId: ID!
    literalValue: LiteralPropertyValueScalar
    associationsValue: [AssociationInput!]
    # TODO
    # staticAssetsValue: [StaticAssetsInput!]
}

input AssociationInput {
    destinationEntityId: ID!
    # TODO
    # propertyValues: [PropertyStateInput!]!
}

type Mutation {
    createEntityDefinition(
        entityDef: EntityDefinitionInput!
    ): EntityDefinitionModerationStatus

    updateEntityDefinition(
        id: ID!
        entityDef: EntityDefinitionInput!
    ): EntityDefinitionModerationStatus

    createEntityRequest(
        entityDefId: ID!
        initialState: [PropertyStateInput!]!
    ): EntityModerationStatus
    # startPublishing: Date,
    # stopPublishing: Date

    updateEntityRequest(
        entityId: ID!
        entityDefId: ID!
        """
        Note: only properties that have actually been updated need to be passed here
        """
        updatedState: [PropertyStateInput!]!
    ): EntityModerationStatus
    # startPublishing: Date
    # stopPublishing: Date

    # TODO allow deleting multiple entities at once
    deleteEntityRequest(entityId: ID!, entityDefId: ID!): EntityModerationStatus
}
